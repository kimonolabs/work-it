#!/usr/bin/env node

var chalk = require('chalk');
var workit = require('../');
var moment = require('moment');
var argv = require('minimist')(process.argv.slice(2));

var usage = function(message) {
  if (message) {
    console.log();
    console.log(chalk.red('Error') + ':', message);
  }
  console.log();
  console.log(chalk.cyan('Usage') + ': reap-it [options] <redis-url>');
  console.log(chalk.cyan('Usage') + ': reap-it -v');
  console.log();
  console.log(chalk.cyan('Version') + ':', workit.version);
  console.log();
  console.log(chalk.cyan('Options') + ':');
  console.log('  -i <reaper interval>     [default: 15000]');
  console.log('  -t <task timeout>        [default: 10000]');
  console.log();
  
  process.exit(1);
};

if (argv.v) {
  console.log(workit.version);
  process.exit();
}

if (argv._.length !== 1) { usage(); }
if (argv.i && typeof(argv.i) !== 'number') { usage('Reaper interval must be a number'); }
if (argv.t && typeof(argv.t) !== 'number') { usage('Task timeout must be a number'); }

var reaperInterval = argv.i || 15000;
var taskTimeout = argv.t || 10000;
var redisURL = argv._[0];

if (reaperInterval < 1000) { usage('Reaper interval must be >= 1000'); }

console.log();
console.log(chalk.cyan('Reaper configuration:'));
console.log('  - Reaper Interval :', chalk.magenta(reaperInterval));
console.log('  - Task Timeout    :', chalk.magenta(taskTimeout));
console.log('  - Redis URL       :', chalk.magenta(redisURL));
console.log();

var RedisClient = require('../lib/redis-client');
var client = new RedisClient(redisURL, {}, {
  rpopzadd: {
    luafile: require.resolve('../lua/rpopzadd.lua'),
    keys: 2,
    args: 2
  },
  retrytasks: {
    luafile: require.resolve('../lua/retrytasks.lua'),
    keys: 1,
    args: 1
  }
});

var retry = function() {
  client.scripts.retrytasks('working', Date.now() - taskTimeout).then(function(queuedTasks) {
    console.log(chalk.cyan(moment().format()), ': Re-queued ' + chalk.magenta(queuedTasks.length) + ' tasks');
  }).catch(function(err) {
    console.log(err.stack);
  });
};

setInterval(retry, reaperInterval);
retry();
